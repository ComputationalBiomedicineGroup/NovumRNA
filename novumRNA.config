/*
========================================================================================
    NovumRNA config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------

*/

// Global default params, used in configs
params {

    // Your downloaded references folder
    input_ref           = "/gpfs/gpfs1/scratch/c1041169/NovumRNA_all_ref" // Use the realpath! No "/" at the end!
    novumrna            = "/gpfs/gpfs1/scratch/c1041169/NovumRNA" // Use the realpath! No "/" at the end!
    outdir              = "/gpfs/gpfs1/scratch/c1041169/NovumRNA_results/" // Include the "/" at the end

    // Input options
    input_fastq         = "${params.input_ref}/samplesheet_CRC_fastq_sub.csv"
    input_gtf           = "/scratch/c1041169/NovumRNA_results/Rerun_samplesheet/AK11_CRC01_rerun_samplesheet.csv"
    input_capture_gtf   = ""

    // References
    genome              = "${params.input_ref}/GRCh38.primary_assembly.genome.fa"
    reference_GTF       = "${params.input_ref}/gencode.v38.primary_assembly.annotation.gtf"
    ref_proteome        = "${params.input_ref}/gencode.v41.pc_translations.fa"
    capture_bed         = "${params.input_ref}/capture_bed.bed"
    HLA_ref             = "${params.input_ref}/yara_index/hla_reference_rna"
    default_hla         = "${params.input_ref}/HLA_default.txt"
    default_hla_II      = "${params.input_ref}/HLA_class_II_default_alleles.txt"
    genome_length       = "${params.input_ref}/chr_lengths_clean.genome"
    Annotation_2        = "${params.input_ref}/ERV_annotation.bed"
    novumrna_container  = "${params.input_ref}/NovumRNA.sif"
    pvactools_container = "${params.input_ref}/pVACtools_container.sif"

    // Your aligner of choice, "hisat" or "star"
    aligner             = "hisat"

    // Directories (need to be in quotes)
    outdir_capture      = ""
    publish_dir_mode    = "copy"

    // To be specified after first run
    hisat_index         = "${params.input_ref}/hisat_genome_index/hisat_index"
    star_index          = "/gpfs/gpfs1/scratch/c1041169/NovumRNA_all_ref/STAR_dummy_index.txt"

    // No empty string allowed, use "${params.input_ref}/Test_ref_pep.txt" if Ref_pep should be re-generated
    // Replace it with the new Ref_pep afterwards
    Ref_pep             = "${params.input_ref}/Control_peptides_len_9_15_rmdup.fasta"

    // After first run and iedb is installed, specifiy "${params.input_ref}/iedb/iedb_install_ok.chck"
    // Like this NovumRNA knows iedb is installed and won't run it again
    IEDB_check          = "/scratch/c1041169/NovumRNA_all_ref/iedb/iedb_install_ok.chck"

    // Arguments
    peptide_length      = "9 15" // Used for binding prediction and Ref_pep filtering
    two_pass            = false  // Run STAR aligner in two-pass mode
    riboseq             = false
    split_netMHCpan     = 1
    split_anno_2        = 1
    tpm_min_novel       = 2
    cov_min_novel       = 4
    tpm_max_diff        = 1
    cov_max_diff        = 4
    tpm_min_diff        = 10
    cov_min_diff        = 16
    BAM_cov             = 2

    // IEDB tools urls for MHCI and MHCII. These will be used for IEDB installation into resources.databases.IEDB_dir
    IEDB_MHCI_url  = "https://downloads.iedb.org/tools/mhci/3.1.2/IEDB_MHC_I-3.1.2.tar.gz"
    IEDB_MHCII_url = "https://downloads.iedb.org/tools/mhcii/3.1.6/IEDB_MHC_II-3.1.6.tar.gz"

    // REQUIRED: Path to the installation directory of HLA-HD
    // Please install HLA-HD locally, you can get your own copy of HLA-HD at:
    // https://www.genome.med.kyoto-u.ac.jp/HLA-HD/
    HLAHD_DIR = "${params.input_ref}/hlahd/" // /path/to/hlhd.x.x.x/
}

process {

    withName: 'install_IEDB' {
        cpus = 1
        container = params.pvactools_container
        publishDir = [path: "${params.input_ref}/iedb", mode: params.publish_dir_mode]
        
    }

    withName: 'pVACbind_class_I' {
        cpus = 1
        container = params.pvactools_container
        publishDir = [path: "${params.outdir}bind_class_I", mode: params.publish_dir_mode]
        
    }

    withName: 'pVACbind_class_II' {
        cpus = 1
        container = params.pvactools_container
        publishDir = [path: "${params.outdir}bind_class_II", mode: params.publish_dir_mode]
        
    }

    withName: 'Indices' {
        cpus = 4
        container = params.novumrna_container
        publishDir = [path: "${params.input_ref}/Indices", mode: params.publish_dir_mode]
        
    }
    withName: 'OptiType' {
        cpus = 4
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}OptiType", mode: params.publish_dir_mode]
        
    }

    withName: 'alignment' {
        cpus = 4
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}alignment", mode: params.publish_dir_mode]
        
    }

    withName: 'StringTie' {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}StringTie", mode: params.publish_dir_mode]
        
    }

    withName: HLA_extraction {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}HLA_extraction", mode: params.publish_dir_mode]
        
    }

    withName: HLA_HD {
        cpus = 4
        container = params.pvactools_container
        publishDir = [path: "${params.outdir}HLA_HD", mode: params.publish_dir_mode]
        
    }

    withName: Create_capture_bed {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.input_ref}/Capture_bed", mode: params.publish_dir_mode]
        
    }

    withName: Protein_to_peptides {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.input_ref}/Pep_ref", mode: params.publish_dir_mode]
        
    }

    withName: Filtering {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Filtering", mode: params.publish_dir_mode]
        
    }


    withName: 'Translation' {
        cpus = 4
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Translation", mode: params.publish_dir_mode]
        
    }

    withName: 'Translation_2' {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Translation_2", mode: params.publish_dir_mode]
        
    }

    withName: Annotation {
        cpus = 4
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Annotation", mode: params.publish_dir_mode]
        
    }

    withName: Annotation_2 {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Annotation_2", mode: params.publish_dir_mode]
        
    }

     withName: final_out_1 {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}final_out", mode: params.publish_dir_mode]
        
    }

    withName: final_out_2 {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}final_out", mode: params.publish_dir_mode]
        
    }

    withName: Combine {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Combine", mode: params.publish_dir_mode]
        
    }

    withName: Rerun_samplesheet {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Rerun_samplesheet", mode: params.publish_dir_mode]
        
    }

    withName: Metadata_MHCI {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Metadata_MHCI", mode: params.publish_dir_mode]
        
    }

    withName: Metadata_MHCII {
        cpus = 1
        container = params.novumrna_container
        publishDir = [path: "${params.outdir}Metadata_MHCII", mode: params.publish_dir_mode]
        
    }

}

profiles {
  cluster {
   process {
      executor = 'sge'
      penv = 'smp'
      clusterOptions = { '-V -S /bin/bash -N NovumRNA -l h_rt=01:00:00 -pe openmpi-fillup 4 -l h_vmem=12G -q short.q -o /scratch/c1041169/NovumRNA_all_ref/novumrna.log'}
    }
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = "--no-home" + " -B " + params.input_ref + "/iedb:/opt/iedb/" + " -B " + params.novumrna + "/bin:/scripts/" + " -B " + params.HLAHD_DIR + ":/opt/hlahd/"
  }
}

executor {
  $sge {
    queueSize = 600
  }
}